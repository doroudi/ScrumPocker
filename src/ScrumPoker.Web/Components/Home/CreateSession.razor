@using Radzen
@using System.Text.Json

@namespace ScrumPoker.Components
@inject DialogService DialogService
@inject ISessionService SessionService
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject NotificationService NotificationService
@inject IJSRuntime jsRuntime

<RadzenStack Gap="1.5rem">
    <RadzenTemplateForm TItem="CreateSessionModel" Data=@model Submit=@OnCreateSession>
        <RadzenStack Orientation="Orientation.Vertical" Gap="0.5rem" AlignItems="AlignItems.Stretch"
            JustifyContent="JustifyContent.SpaceBetween">
            <RadzenText TextStyle="TextStyle.Body1">
                To create a new session, please enter a name for the session:
            </RadzenText>
            <RadzenFormField Text="Session Name">
                <ChildContent>
                    <RadzenTextBox Name="SessionName" @bind-Value="@model.SessionName" Style="width:100%"
                        Placeholder="Session Name" />
                </ChildContent>
                <Helper>
                    <RadzenRequiredValidator Component="SessionName" Text="Session name is required." />
                </Helper>
            </RadzenFormField>
            <RadzenStack Orientation="Orientation.Horizontal">
                <RadzenButton Text="Create" ButtonType="ButtonType.Submit" IsBusy="IsLoading"
                    ButtonStyle="ButtonStyle.Success" Style="width: 80px;" />
                <RadzenButton Text="Cancel" Click="() => DialogService.Close(false)" ButtonStyle="ButtonStyle.Light" />
            </RadzenStack>
        </RadzenStack>
    </RadzenTemplateForm>
</RadzenStack>

@code {
    public class CreateSessionModel
    {
        public string SessionName { get; set; }
        public string CreatorName { get; set; } = string.Empty;
    }

    private bool _isLoading;
    public bool IsLoading
    {
        get { return _isLoading; }
        set
        {
            _isLoading = value;
            StateHasChanged();
        }
    }
    CreateSessionModel model = new();

    async Task OnCreateSession()
    {
        IsLoading = true;
        StateHasChanged();
        try
        {
            var session = await SessionService.CreateSessionAsync(model.SessionName);
            if (session.IsError)
            {
                NotificationService.Notify(NotificationSeverity.Error, "Cannot create session", "");
                return;
            }

            NotificationService.Notify(NotificationSeverity.Success, "Success", "Session Created!");
            await jsRuntime.InvokeVoidAsync("setCookie", "UserId", session.Value.CreatorId);
            NavigationManager.NavigateTo($"/Session/{session.Value.Id}", true);
        }
        finally
        {
            IsLoading = false;
        }
    }
}